[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Ricky Woznichak",
    "section": "",
    "text": "I’m Ricky Woznichak, a passionate digital marketing professional and current M.S. candidate in Digital Marketing at Cal Poly Pomona. Prior to my stint as an actor, I cut my teeth as an Assistant Digital Media Planner at UM, crafting campaigns for clients like Sony Home Entertainment and IHOP. Along the way I also honed my storytelling and people skills as a substitute teacher and—true story—an awesome waiter. I’ve led SEO initiatives, mastered tools like Google Analytics and SEMrush, and built interactive R and Quarto dashboards that turn complex insights into clear action. When I’m not geeking out over forecasting models for my Productfolio.com thesis, you’ll find me strolling with my dog Jimmy — because great ideas often strike when you’re off screen.\nYou can find my entire journey on Linkedin - Let’s Connect!"
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Ricky Woznichak",
    "section": "Education",
    "text": "Education\n\nBachelor’s of Science in Marketing Management\n\nCalifornia State Polytechnic University, Pomona | California | June 2010\n\n\n\nMaster’s of Science in Digital Marketing\n\nCalifornia State Polytechnic University, Pomona | California | August 2025"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Ricky Woznichak",
    "section": "Experience",
    "text": "Experience\nJohn Franklin Insurance | Marketing Manager | 2024-2025\nLos Angeles Unified School District |Substitute Teacher & Special Education Teacher | 2019—2024\nMama Shelter, Esterel, Mixto | Server + Banquet Server |2013—2024\nStudio71 | Sales Development Coordinator | 2012—2013\nUniversal McCann | Assistant Digital Media Planner |2011—2012\nUniversal Music Group | Digital Marketing Coordinator | 2010—2011"
  },
  {
    "objectID": "index.html#masters-of-science-in-digital-marketing",
    "href": "index.html#masters-of-science-in-digital-marketing",
    "title": "Ricky Woznichak",
    "section": "Master’s of Science in Digital Marketing",
    "text": "Master’s of Science in Digital Marketing\n\nCalifornia State Polytechnic University, Pomona | California | August 2025"
  },
  {
    "objectID": "index.html#work-experience",
    "href": "index.html#work-experience",
    "title": "Ricky Woznichak",
    "section": "Work Experience",
    "text": "Work Experience\nJohn Franklin Insurance | Marketing Manager | 2024-2025\nLos Angeles Unified School District |Substitute Teacher & Special Education Teacher | 2019—2024\nMama Shelter, Esterel, Mixto | Server + Banquet Server |2013—2024\nStudio71 | Sales Development Coordinator | 2012—2013\nUniversal McCann | Assistant Digital Media Planner |2011—2012\nUniversal Music Group | Digital Marketing Coordinator | 2010—2011"
  },
  {
    "objectID": "shiny-apps.html",
    "href": "shiny-apps.html",
    "title": "Shiny Apps",
    "section": "",
    "text": "The video helped me understand how the Shiny package in R turns static R code written within R scripts into dynamic web applications. These web apps are hosted locally on your machine or on a remote server (for example, shinyapps.io). As web apps play a central role in data-driven analysis, most data scientists need to build them and work with them efficiently. It was especially interesting to me since I have always been keen on creating interactive dashboards, and Shiny is a tool that enables me to translate complex data into data visualizations easily and rapidly, maintaining the interactivity of the original data. Thanks to Shiny, no prior knowledge on web development is needed. Therefore, R users with a goal of developing apps can familiarize themselves with the required skill set of web development.\n\n\n\nBy the end of this workshop, I was able to:\n\nNote the Shiny application’s basic components: the UI (User Interface) and server program code, and how the two areas interact.\nInsert reactive programming features within Shiny to reflect changes when user actions are performed.\nAdd interactivity to my data visualizations utilizing libraries such as plotly, so that I can create interactive ggplot2 graphics.\nPublish my Shiny apps on platforms like ShinyApps.io or an internal server, where access to the apps is easy for others.\nIntegrate security into my Shiny apps using shinyManager, which will provide me the basic password protection, and in addition, help me to learn more advanced security concerning enterprise-level applications.\n\n\n\n\n\n\nShiny apps have two main parts: the UI through which users interact with the app, and the server where you define how the app works. While UI identifies the layout and allows me to describe how users can interact with the app, the server describes the back-end, processing users’ input and developing the relevant output. In fact, one of the distinct features of Shiny is its reactive programming system, whereby the server reflects back outputs when the users interact with the UI.\n\n\n\nWhenever there is a change in the input fields, Shiny’s reactivity comes into play. With Shiny, the app immediately updates the output without requiring a manual refresh to reflect changes in the input. For instance, when a user selects a category from a drop-down list, it automatically generates a corresponding chart with the newly aggregated values. This mechanism offers to the user an intuitive interaction with the app, which seems effortless from the observer’s side.\n\n\n\nThe Shiny package has the advantage of integrating with interactive data visualization libraries like plotly. In this section, the application of plotly took the static ggplot2 plots I generated before and transformed them into interactive charts for the viewers to pull out some specifics they are interested in. Such functionalities include pan, zoom, tooltip for discovery of tooltip data, and on-the-fly filtering, which make data exploration extraordinary.\n\n\n\nTherefore, once I have designed the Shiny application, the next step is app deployment. I tried out a couple of platforms, and in my research, I found ShinyApps.io, which is hosted by RStudio. I think this app is very convenient since, once deployed, users can run it from anywhere in the world by simply clicking a link on a web browser—there’s no need for them to install R or RStudio, which makes it a very time-saving way for sharing.\n\n\n\nWhen deploying Shiny apps that handle sensitive data, security is a key consideration. Although security functions are not built-in features in Shiny framework, the app does allow for implementation of security features. Specifically, I employed shinyManager package to offer my app with password login protection. This allows the package to sufficiently limit access to the app by users whose log in credentials are incorrect. As an application developer, I consider utilizing more advanced security platforms, such as Active Directory or OAuth, to ensure secure environment for more complex applications.\n\n\n\n\nShiny has been a great resource for me in converting my Vignette to Shiny. Signing into Shiny gives you direct access to my project without worrying about installing extra software. After how well my first app turned out, I am now looking to convert my projects to Shiny to take advantage of the interactive features that they offer.\nMoving forward, I can do away with installing additional software by giving others direct access to my apps, and at the same time take security precautions for private data. With Shiny, I do not have to bother others to install the extra software for them to access my app. Security is a concern I can fully address. I am energized about building more Shiny apps and learning about deeper features, such as new themes, layouts, and data analysis integration, as I go."
  },
  {
    "objectID": "shiny-apps.html#introduction-to-shiny-apps-my-workshop-experience",
    "href": "shiny-apps.html#introduction-to-shiny-apps-my-workshop-experience",
    "title": "Shiny Apps",
    "section": "",
    "text": "The video helped me understand how the Shiny package in R turns static R code written within R scripts into dynamic web applications. These web apps are hosted locally on your machine or on a remote server (for example, shinyapps.io). As web apps play a central role in data-driven analysis, most data scientists need to build them and work with them efficiently. It was especially interesting to me since I have always been keen on creating interactive dashboards, and Shiny is a tool that enables me to translate complex data into data visualizations easily and rapidly, maintaining the interactivity of the original data. Thanks to Shiny, no prior knowledge on web development is needed. Therefore, R users with a goal of developing apps can familiarize themselves with the required skill set of web development."
  },
  {
    "objectID": "shiny-apps.html#learning-outcomes",
    "href": "shiny-apps.html#learning-outcomes",
    "title": "Shiny Apps",
    "section": "",
    "text": "By the end of this workshop, I was able to:\n\nNote the Shiny application’s basic components: the UI (User Interface) and server program code, and how the two areas interact.\nInsert reactive programming features within Shiny to reflect changes when user actions are performed.\nAdd interactivity to my data visualizations utilizing libraries such as plotly, so that I can create interactive ggplot2 graphics.\nPublish my Shiny apps on platforms like ShinyApps.io or an internal server, where access to the apps is easy for others.\nIntegrate security into my Shiny apps using shinyManager, which will provide me the basic password protection, and in addition, help me to learn more advanced security concerning enterprise-level applications."
  },
  {
    "objectID": "shiny-apps.html#key-concepts-in-shiny",
    "href": "shiny-apps.html#key-concepts-in-shiny",
    "title": "Shiny Apps",
    "section": "",
    "text": "Shiny apps have two main parts: the UI through which users interact with the app, and the server where you define how the app works. While UI identifies the layout and allows me to describe how users can interact with the app, the server describes the back-end, processing users’ input and developing the relevant output. In fact, one of the distinct features of Shiny is its reactive programming system, whereby the server reflects back outputs when the users interact with the UI.\n\n\n\nWhenever there is a change in the input fields, Shiny’s reactivity comes into play. With Shiny, the app immediately updates the output without requiring a manual refresh to reflect changes in the input. For instance, when a user selects a category from a drop-down list, it automatically generates a corresponding chart with the newly aggregated values. This mechanism offers to the user an intuitive interaction with the app, which seems effortless from the observer’s side.\n\n\n\nThe Shiny package has the advantage of integrating with interactive data visualization libraries like plotly. In this section, the application of plotly took the static ggplot2 plots I generated before and transformed them into interactive charts for the viewers to pull out some specifics they are interested in. Such functionalities include pan, zoom, tooltip for discovery of tooltip data, and on-the-fly filtering, which make data exploration extraordinary.\n\n\n\nTherefore, once I have designed the Shiny application, the next step is app deployment. I tried out a couple of platforms, and in my research, I found ShinyApps.io, which is hosted by RStudio. I think this app is very convenient since, once deployed, users can run it from anywhere in the world by simply clicking a link on a web browser—there’s no need for them to install R or RStudio, which makes it a very time-saving way for sharing.\n\n\n\nWhen deploying Shiny apps that handle sensitive data, security is a key consideration. Although security functions are not built-in features in Shiny framework, the app does allow for implementation of security features. Specifically, I employed shinyManager package to offer my app with password login protection. This allows the package to sufficiently limit access to the app by users whose log in credentials are incorrect. As an application developer, I consider utilizing more advanced security platforms, such as Active Directory or OAuth, to ensure secure environment for more complex applications."
  },
  {
    "objectID": "shiny-apps.html#conclusion",
    "href": "shiny-apps.html#conclusion",
    "title": "Shiny Apps",
    "section": "",
    "text": "Shiny has been a great resource for me in converting my Vignette to Shiny. Signing into Shiny gives you direct access to my project without worrying about installing extra software. After how well my first app turned out, I am now looking to convert my projects to Shiny to take advantage of the interactive features that they offer.\nMoving forward, I can do away with installing additional software by giving others direct access to my apps, and at the same time take security precautions for private data. With Shiny, I do not have to bother others to install the extra software for them to access my app. Security is a concern I can fully address. I am energized about building more Shiny apps and learning about deeper features, such as new themes, layouts, and data analysis integration, as I go."
  },
  {
    "objectID": "Dashboard.html",
    "href": "Dashboard.html",
    "title": "Dashboard Example",
    "section": "",
    "text": "Due to World War II, no Olympic Games were held in 1940 and 1944.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMost Golds:\n2363\nUnited States\n\n\nMost Silvers:\n1251\nUnited States\n\n\nMost Bronzes:\n1126\nUnited States\n\n\n\n\n\nTeams sorted in descending order of total medals.\n\n\n\n\n\n\n\n\nTeam\nGold\nSilver\nBronze\n\n\n\n\nUnited States\n2363\n1251\n1126\n\n\nSoviet Union\n830\n635\n596\n\n\nGermany\n568\n515\n614\n\n\nGreat Britain\n501\n594\n563\n\n\nFrance\n425\n490\n515\n\n\nItaly\n492\n469\n425\n\n\nAustralia\n338\n450\n506\n\n\nHungary\n432\n328\n363\n\n\nSweden\n326\n356\n332\n\n\nChina\n334\n317\n258\n\n\nRussia\n296\n278\n324\n\n\nNetherlands\n235\n283\n350\n\n\nJapan\n230\n287\n333\n\n\nEast Germany\n339\n277\n227\n\n\nCanada\n133\n224\n313\n\n\nRomania\n161\n200\n290\n\n\nDenmark\n168\n218\n166\n\n\nSouth Korea\n171\n206\n175\n\n\nPoland\n111\n185\n242\n\n\nWest Germany\n144\n172\n188\n\n\nSpain\n109\n243\n135\n\n\nBrazil\n109\n175\n191\n\n\nNorway\n148\n165\n154\n\n\nFinland\n132\n118\n200\n\n\nCuba\n164\n127\n116\n\n\nSwitzerland\n96\n175\n136\n\n\nBelgium\n93\n157\n152\n\n\nYugoslavia\n130\n161\n92\n\n\nBulgaria\n53\n142\n141\n\n\nCzechoslovakia\n79\n144\n107\n\n\n\n\n\n\n\n\n\nTeams sorted in ascending order of total medals.\n\n\n\n\n\n\n\n\nTeam\nGold\nSilver\nBronze\n\n\n\n\nBarbados\n0\n0\n1\n\n\nBermuda\n0\n0\n1\n\n\nBonaparte\n1\n0\n0\n\n\nBotswana\n0\n1\n0\n\n\nBrynhild\n0\n1\n0\n\n\nCamille\n1\n0\n0\n\n\nCarabinier\n1\n0\n0\n\n\nCicely\n1\n0\n0\n\n\nClearwater\n0\n0\n1\n\n\nCyprus\n0\n1\n0\n\n\nDigby\n0\n0\n1\n\n\nDjibouti\n0\n0\n1\n\n\nDon Schufro\n0\n0\n1\n\n\nElvis Va\n1\n0\n0\n\n\nEritrea\n0\n0\n1\n\n\nFantlet\n1\n0\n0\n\n\nFemur\n1\n0\n0\n\n\nFormosa\n0\n0\n1\n\n\nFrimousse\n0\n0\n1\n\n\nGabon\n0\n1\n0\n\n\nGuatemala\n0\n1\n0\n\n\nGuyana\n0\n0\n1\n\n\nIraq\n0\n0\n1\n\n\nJordan\n1\n0\n0\n\n\nKosovo\n1\n0\n0\n\n\nLaurea\n0\n0\n1\n\n\nMacedonia\n0\n0\n1\n\n\nMauritius\n0\n0\n1\n\n\nMignon\n0\n0\n1\n\n\nMonaco\n0\n0\n1"
  },
  {
    "objectID": "Dashboard.html#column---medals-by-sport-and-year",
    "href": "Dashboard.html#column---medals-by-sport-and-year",
    "title": "Dashboard Example",
    "section": "",
    "text": "Due to World War II, no Olympic Games were held in 1940 and 1944."
  },
  {
    "objectID": "Dashboard.html#column---medals-by-country",
    "href": "Dashboard.html#column---medals-by-country",
    "title": "Dashboard Example",
    "section": "",
    "text": "Most Golds:\n2363\nUnited States\n\n\nMost Silvers:\n1251\nUnited States\n\n\nMost Bronzes:\n1126\nUnited States\n\n\n\n\n\nTeams sorted in descending order of total medals.\n\n\n\n\n\n\n\n\nTeam\nGold\nSilver\nBronze\n\n\n\n\nUnited States\n2363\n1251\n1126\n\n\nSoviet Union\n830\n635\n596\n\n\nGermany\n568\n515\n614\n\n\nGreat Britain\n501\n594\n563\n\n\nFrance\n425\n490\n515\n\n\nItaly\n492\n469\n425\n\n\nAustralia\n338\n450\n506\n\n\nHungary\n432\n328\n363\n\n\nSweden\n326\n356\n332\n\n\nChina\n334\n317\n258\n\n\nRussia\n296\n278\n324\n\n\nNetherlands\n235\n283\n350\n\n\nJapan\n230\n287\n333\n\n\nEast Germany\n339\n277\n227\n\n\nCanada\n133\n224\n313\n\n\nRomania\n161\n200\n290\n\n\nDenmark\n168\n218\n166\n\n\nSouth Korea\n171\n206\n175\n\n\nPoland\n111\n185\n242\n\n\nWest Germany\n144\n172\n188\n\n\nSpain\n109\n243\n135\n\n\nBrazil\n109\n175\n191\n\n\nNorway\n148\n165\n154\n\n\nFinland\n132\n118\n200\n\n\nCuba\n164\n127\n116\n\n\nSwitzerland\n96\n175\n136\n\n\nBelgium\n93\n157\n152\n\n\nYugoslavia\n130\n161\n92\n\n\nBulgaria\n53\n142\n141\n\n\nCzechoslovakia\n79\n144\n107\n\n\n\n\n\n\n\n\n\nTeams sorted in ascending order of total medals.\n\n\n\n\n\n\n\n\nTeam\nGold\nSilver\nBronze\n\n\n\n\nBarbados\n0\n0\n1\n\n\nBermuda\n0\n0\n1\n\n\nBonaparte\n1\n0\n0\n\n\nBotswana\n0\n1\n0\n\n\nBrynhild\n0\n1\n0\n\n\nCamille\n1\n0\n0\n\n\nCarabinier\n1\n0\n0\n\n\nCicely\n1\n0\n0\n\n\nClearwater\n0\n0\n1\n\n\nCyprus\n0\n1\n0\n\n\nDigby\n0\n0\n1\n\n\nDjibouti\n0\n0\n1\n\n\nDon Schufro\n0\n0\n1\n\n\nElvis Va\n1\n0\n0\n\n\nEritrea\n0\n0\n1\n\n\nFantlet\n1\n0\n0\n\n\nFemur\n1\n0\n0\n\n\nFormosa\n0\n0\n1\n\n\nFrimousse\n0\n0\n1\n\n\nGabon\n0\n1\n0\n\n\nGuatemala\n0\n1\n0\n\n\nGuyana\n0\n0\n1\n\n\nIraq\n0\n0\n1\n\n\nJordan\n1\n0\n0\n\n\nKosovo\n1\n0\n0\n\n\nLaurea\n0\n0\n1\n\n\nMacedonia\n0\n0\n1\n\n\nMauritius\n0\n0\n1\n\n\nMignon\n0\n0\n1\n\n\nMonaco\n0\n0\n1"
  },
  {
    "objectID": "Dashboard.html#column---medals-by-sport-and-year-1",
    "href": "Dashboard.html#column---medals-by-sport-and-year-1",
    "title": "Dashboard Example",
    "section": "Column - Medals by sport and year",
    "text": "Column - Medals by sport and year\n\nRow - Medals By Sport\n\n\n\n\n\n\n\n\n\n\n\nRow - Medals By Year\n\nDue to World War II, no olympic games were held in 1940 and 1944."
  },
  {
    "objectID": "Dashboard.html#column---medals-by-country-1",
    "href": "Dashboard.html#column---medals-by-country-1",
    "title": "Dashboard Example",
    "section": "Column - Medals By country",
    "text": "Column - Medals By country\n\nRow - Value boxes\n\nMost Golds:\n305\nCanada\n\n\nMost Silvers:\n308\nUnited States\n\n\nMost Bronzes:\n215\nFinland\n\n\n\nRow - Tabsets of tables\n\nTeams sorted in descending order of total medals.\n\n\n\n\n\n\n\n\nTeam\nGold\nSilver\nBronze\n\n\n\n\nUnited States\n166\n308\n161\n\n\nCanada\n305\n199\n107\n\n\nNorway\n151\n165\n127\n\n\nSoviet Union\n250\n97\n93\n\n\nSweden\n125\n126\n177\n\n\nFinland\n66\n145\n215\n\n\nGermany\n153\n136\n97\n\n\nAustria\n79\n98\n103\n\n\nSwitzerland\n76\n70\n129\n\n\nRussia\n94\n89\n77\n\n\nItaly\n57\n57\n77\n\n\nEast Germany\n58\n50\n54\n\n\nCzechoslovakia\n2\n81\n75\n\n\nFrance\n36\n35\n79\n\n\nNetherlands\n42\n38\n42\n\n\nSouth Korea\n50\n26\n10\n\n\nGreat Britain\n42\n10\n31\n\n\nWest Germany\n15\n22\n45\n\n\nChina\n16\n30\n34\n\n\nCzech Republic\n27\n12\n34\n\n\nJapan\n17\n22\n24\n\n\nUnified Team\n35\n10\n14\n\n\nPoland\n6\n10\n11\n\n\nSlovenia\n2\n4\n12\n\n\nAustralia\n6\n3\n7\n\n\nBelarus\n6\n4\n5\n\n\nLatvia\n0\n8\n7\n\n\nBelgium\n2\n4\n7\n\n\nHungary\n0\n4\n8\n\n\nCroatia\n4\n6\n1\n\n\n\n\n\n\n\n\n\nTeams sorted in ascending order of total medals.\n\n\n\n\n\n\n\n\nTeam\nGold\nSilver\nBronze\n\n\n\n\nNepal\n1\n0\n0\n\n\nNew Zealand\n0\n1\n0\n\n\nUzbekistan\n1\n0\n0\n\n\nLuxembourg\n0\n2\n0\n\n\nNorth Korea\n0\n1\n1\n\n\nRomania\n0\n0\n2\n\n\nSpain\n1\n0\n1\n\n\nDenmark\n0\n5\n0\n\n\nSlovakia\n2\n2\n1\n\n\nBulgaria\n1\n2\n3\n\n\nEstonia\n4\n2\n1\n\n\nIndia\n7\n0\n0\n\n\nKazakhstan\n1\n3\n3\n\n\nYugoslavia\n0\n6\n1\n\n\nLiechtenstein\n2\n2\n5\n\n\nCroatia\n4\n6\n1\n\n\nUkraine\n5\n1\n5\n\n\nHungary\n0\n4\n8\n\n\nBelgium\n2\n4\n7\n\n\nBelarus\n6\n4\n5\n\n\nLatvia\n0\n8\n7\n\n\nAustralia\n6\n3\n7\n\n\nSlovenia\n2\n4\n12\n\n\nPoland\n6\n10\n11\n\n\nUnified Team\n35\n10\n14\n\n\nJapan\n17\n22\n24\n\n\nCzech Republic\n27\n12\n34\n\n\nChina\n16\n30\n34\n\n\nWest Germany\n15\n22\n45\n\n\nGreat Britain\n42\n10\n31"
  },
  {
    "objectID": "shiny-apps.html#introduction-to-shiny-apps",
    "href": "shiny-apps.html#introduction-to-shiny-apps",
    "title": "Shiny Apps",
    "section": "",
    "text": "The video helped me understand how the Shiny package in R turns static R code written within R scripts into dynamic web applications. These web apps are hosted locally on your machine or on a remote server (for example, shinyapps.io). As web apps play a central role in data-driven analysis, most data scientists need to build them and work with them efficiently. It was especially interesting to me since I have always been keen on creating interactive dashboards, and Shiny is a tool that enables me to translate complex data into data visualizations easily and rapidly, maintaining the interactivity of the original data. Thanks to Shiny, no prior knowledge on web development is needed. Therefore, R users with a goal of developing apps can familiarize themselves with the required skill set of web development."
  },
  {
    "objectID": "shiny-live.html",
    "href": "shiny-live.html",
    "title": "Shiny Apps Live",
    "section": "",
    "text": "If you have any experience with Shiny, then you probably know that normally, Shiny apps are deployed on a central server, such as Posit Connect or your self-coded server. App users engage with the application through their web browsers, but the app’s R session and computations are still performed only on the server. As a result, the server becomes the one that has to do all the calculations, which consequently makes the app operate slowly and overload the server with every increase in popularity or high traffic.\n\n\n\nShiny Live resembles a novel strategy that alters the norm of doing Shiny apps by placing the R session directly in the user’s browser. This serverless architecture means that the application will not communicate with any server for backend support or processing; all computations will be handled locally within the user’s browser. People can communicate with the app using only one page load, and it will still update it instantly. As a result, the update will no longer involve the back and forth communication with a remote server. It is done through the shiny live export feature, which bundles the app code into a folder that can be hosted on the GitHub Pages. The user simply has to visit the app’s web address (URL), and then she must wait a little while for it to load. After warding off the start, the user can immediately start working with the app.\n\n\n\nThe conventional Shiny program is an instance where R code is executed on a server, and most computations and data manipulations take place there. The server processes this info and sends it to the user’s browser as an interactive webpage. This implies that when various requests are placed on the app at the same time, the server gets to be the only one performing all the app functions, and in situations where the server is unable to meet the demand, the request leads to slowness and sometimes even crashes.\nOn the other hand, Shiny Live uses the user’s laptop CPU for R session processing instead of the server, which means the entire app will be based on the capabilities of their browser. Users don’t require anything offline. All they need to do is navigate through a URL online. The app performs all calculations offline, and there’s not anything that could result in a server with too many users in this situation. There are no special settings to be done off the concurrent file system – GitHub Pages provides them freely.\n\n\n\n\n\n\nServerless Hosting: Live Shiny’s biggest benefit is it doesn’t require in-house infrastructure to run the app. This allows you to test ideas or simple applications without a heavy server, which could be expensive and demanding.\nPotential for increased user base: Since the computations are done in the browser, Shiny Live apps do not have throughput limitations because of server workload abilities. As a qualification requirement, users only need to have up-to-date browsers.\nReduced Costs: Because you do not need a server to run the app, the cost of deploying the app is almost zeroed. You can host the app on platforms such as GitHub Pages, causing a major advantage for small projects or academic feasibility studies.\nImmediate Availability: People don’t need to run or install any software, i.e., R or RStudio, on their computers. A converse attitude is evinced – they just click on the URL and interact with the app directly in their browser.\n\n\n\n\n\nProcessing Limitations on Client-Side: Given the nature of using Shiny Live, it may not be the right tool for apps with significant computations that require intensive algorithms or large datasets. If the app consists of multi-stage analysis, then traditional Shiny may still be used.\nStringent Data Privacy: The typical Shiny app has R codes, data and everything sent to the user side. In this case, sensitive data cannot be handled properly because users have broad access to codebase. For the confidential information, the security will be guaranteed more on the server-side process.\nRestricted Dependencies: Currently, Shiny Live has constraints on particular R packages, for instance, one which uses system libraries such as curl. These packages will not function perfectly in Shiny Live apps to make it a little bit less flexible in employing some use cases.\nExcel icon at work: The load time on Shiny Live apps is fairly quick, but there will still be a 5-second wait for the app to load fully and get started in the browser. Nevertheless, this is substantially lower than before and can be viewed by some users as the only disadvantage.\n\n\n\n\n\nShiny Live points to a turning point in our conceptions of deploying Shiny applications. Due to the move from server to clients’ browsers, Shiny Live implies easier, faster as well as serverless deployment. It suits those apps that are small, lightweight and without any data security involving complicated calculations. As for other resource-demanding or safety-persistent applications, traditional Shiny coding with server side computations may indeed remain the best option. With the progress of Shiny Live, the object can become a helpful instrument for quick launching of dynamic applications with no-server environments."
  },
  {
    "objectID": "shiny-live.html#a-better-way-of-doing-things-serverless-computing-with-shiny-apps",
    "href": "shiny-live.html#a-better-way-of-doing-things-serverless-computing-with-shiny-apps",
    "title": "Shiny Apps Live",
    "section": "",
    "text": "If you have any experience with Shiny, then you probably know that normally, Shiny apps are deployed on a central server, such as Posit Connect or your self-coded server. App users engage with the application through their web browsers, but the app’s R session and computations are still performed only on the server. As a result, the server becomes the one that has to do all the calculations, which consequently makes the app operate slowly and overload the server with every increase in popularity or high traffic."
  },
  {
    "objectID": "shiny-live.html#what-are-the-shiny-live-and-its-concepts",
    "href": "shiny-live.html#what-are-the-shiny-live-and-its-concepts",
    "title": "Shiny Apps Live",
    "section": "",
    "text": "Shiny Live resembles a novel strategy that alters the norm of doing Shiny apps by placing the R session directly in the user’s browser. This serverless architecture means that the application will not communicate with any server for backend support or processing; all computations will be handled locally within the user’s browser. People can communicate with the app using only one page load, and it will still update it instantly. As a result, the update will no longer involve the back and forth communication with a remote server. It is done through the shiny live export feature, which bundles the app code into a folder that can be hosted on the GitHub Pages. The user simply has to visit the app’s web address (URL), and then she must wait a little while for it to load. After warding off the start, the user can immediately start working with the app."
  },
  {
    "objectID": "shiny-live.html#how-does-shiny-live-differ-from-the-traditional-shining-apps",
    "href": "shiny-live.html#how-does-shiny-live-differ-from-the-traditional-shining-apps",
    "title": "Shiny Apps Live",
    "section": "",
    "text": "The conventional Shiny program is an instance where R code is executed on a server, and most computations and data manipulations take place there. The server processes this info and sends it to the user’s browser as an interactive webpage. This implies that when various requests are placed on the app at the same time, the server gets to be the only one performing all the app functions, and in situations where the server is unable to meet the demand, the request leads to slowness and sometimes even crashes.\nOn the other hand, Shiny Live uses the user’s laptop CPU for R session processing instead of the server, which means the entire app will be based on the capabilities of their browser. Users don’t require anything offline. All they need to do is navigate through a URL online. The app performs all calculations offline, and there’s not anything that could result in a server with too many users in this situation. There are no special settings to be done off the concurrent file system – GitHub Pages provides them freely."
  },
  {
    "objectID": "shiny-live.html#advantages-and-disadvantages-of-shiny-live-in-contrast-to-regular-shiny-apps",
    "href": "shiny-live.html#advantages-and-disadvantages-of-shiny-live-in-contrast-to-regular-shiny-apps",
    "title": "Shiny Apps Live",
    "section": "",
    "text": "Serverless Hosting: Live Shiny’s biggest benefit is it doesn’t require in-house infrastructure to run the app. This allows you to test ideas or simple applications without a heavy server, which could be expensive and demanding.\nPotential for increased user base: Since the computations are done in the browser, Shiny Live apps do not have throughput limitations because of server workload abilities. As a qualification requirement, users only need to have up-to-date browsers.\nReduced Costs: Because you do not need a server to run the app, the cost of deploying the app is almost zeroed. You can host the app on platforms such as GitHub Pages, causing a major advantage for small projects or academic feasibility studies.\nImmediate Availability: People don’t need to run or install any software, i.e., R or RStudio, on their computers. A converse attitude is evinced – they just click on the URL and interact with the app directly in their browser.\n\n\n\n\n\nProcessing Limitations on Client-Side: Given the nature of using Shiny Live, it may not be the right tool for apps with significant computations that require intensive algorithms or large datasets. If the app consists of multi-stage analysis, then traditional Shiny may still be used.\nStringent Data Privacy: The typical Shiny app has R codes, data and everything sent to the user side. In this case, sensitive data cannot be handled properly because users have broad access to codebase. For the confidential information, the security will be guaranteed more on the server-side process.\nRestricted Dependencies: Currently, Shiny Live has constraints on particular R packages, for instance, one which uses system libraries such as curl. These packages will not function perfectly in Shiny Live apps to make it a little bit less flexible in employing some use cases.\nExcel icon at work: The load time on Shiny Live apps is fairly quick, but there will still be a 5-second wait for the app to load fully and get started in the browser. Nevertheless, this is substantially lower than before and can be viewed by some users as the only disadvantage."
  },
  {
    "objectID": "shiny-live.html#final-remarks",
    "href": "shiny-live.html#final-remarks",
    "title": "Shiny Apps Live",
    "section": "",
    "text": "Shiny Live points to a turning point in our conceptions of deploying Shiny applications. Due to the move from server to clients’ browsers, Shiny Live implies easier, faster as well as serverless deployment. It suits those apps that are small, lightweight and without any data security involving complicated calculations. As for other resource-demanding or safety-persistent applications, traditional Shiny coding with server side computations may indeed remain the best option. With the progress of Shiny Live, the object can become a helpful instrument for quick launching of dynamic applications with no-server environments."
  },
  {
    "objectID": "index.html#now-listening",
    "href": "index.html#now-listening",
    "title": "Ricky Woznichak",
    "section": "",
    "text": "I’m Ricky Woznichak, a passionate digital marketing professional and current M.S. candidate in Digital Marketing at Cal Poly Pomona. Prior to my stint as an actor, I cut my teeth as an Assistant Digital Media Planner at UM, crafting campaigns for clients like Sony Home Entertainment and IHOP. Along the way I also honed my storytelling and people skills as a substitute teacher and—true story—an awesome waiter. I’ve led SEO initiatives, mastered tools like Google Analytics and SEMrush, and built interactive R and Quarto dashboards that turn complex insights into clear action. When I’m not geeking out over forecasting models for my Productfolio.com thesis, you’ll find me strolling with my dog Jimmy — because great ideas often strike when you’re off screen.\nYou can find my entire journey on Linkedin - Let’s Connect!"
  },
  {
    "objectID": "index.html#press-play-for-enhanced-experience",
    "href": "index.html#press-play-for-enhanced-experience",
    "title": "Ricky Woznichak",
    "section": "",
    "text": "I’m Ricky Woznichak, a passionate digital marketing professional and current M.S. candidate in Digital Marketing at Cal Poly Pomona. Prior to my stint as an actor, I cut my teeth as an Assistant Digital Media Planner at UM, crafting campaigns for clients like Sony Home Entertainment and IHOP. Along the way I also honed my storytelling and people skills as a substitute teacher and—true story—an awesome waiter. I’ve led SEO initiatives, mastered tools like Google Analytics and SEMrush, and built interactive R and Quarto dashboards that turn complex insights into clear action. When I’m not geeking out over forecasting models for my Productfolio.com thesis, you’ll find me strolling with my dog Jimmy — because great ideas often strike when you’re off screen.\nYou can find my entire journey on Linkedin - Let’s Connect!"
  }
]